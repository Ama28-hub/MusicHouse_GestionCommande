package crud;

import Modele.Data;
import Modele.Promotion;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.time.LocalDate;
import java.sql.Statement;


public class PromotionCRUD {

    /**
     * Ajoute une promotion pour un article sp√©cifique
     */
    public void ajouterPromotion(int idStock, String description, double tauxReduction, LocalDate dateDebut, LocalDate dateFin) throws SQLException, ClassNotFoundException {
        Connection conn = Data.getConnection();
        try {
            // √âtape 1Ô∏è‚É£ : Ins√©rer la promotion dans Promotions
            String sql1 = "INSERT INTO Promotions (description_promotion, taux_reduction, date_debut, date_fin) VALUES (?, ?, ?, ?)";
            PreparedStatement pstmt1 = conn.prepareStatement(sql1, Statement.RETURN_GENERATED_KEYS);
            pstmt1.setString(1, description);
            pstmt1.setDouble(2, tauxReduction);
            pstmt1.setDate(3, java.sql.Date.valueOf(dateDebut));
            pstmt1.setDate(4, java.sql.Date.valueOf(dateFin));
            pstmt1.executeUpdate();

            // R√©cup√©rer l'ID de la promotion ins√©r√©e
            ResultSet rs = pstmt1.getGeneratedKeys();
            int promoId = -1;
            if (rs.next()) {
                promoId = rs.getInt(1);
            }

            // √âtape 2Ô∏è‚É£ : Associer la promotion √† l'article dans Applique
            if (promoId != -1) {
                String sql2 = "INSERT INTO Applique (id_stock, id_promotion) VALUES (?, ?)";
                PreparedStatement pstmt2 = conn.prepareStatement(sql2);
                pstmt2.setInt(1, idStock);
                pstmt2.setInt(2, promoId);
                pstmt2.executeUpdate();
            } else {
                System.out.println("‚ùå Erreur : ID de promotion non r√©cup√©r√© !");
            }

            System.out.println("‚úÖ Nouvelle promotion enregistr√©e !");
        } catch (SQLException e) {
            System.out.println("‚ùå Erreur lors de l'ajout de la promotion : " + e.getMessage());
        } finally {
            conn.close();
        }
    }


    /**
     * R√©cup√®re la promotion active pour un article donn√©
     */
    public Promotion getPromotionActive(int idStock) throws SQLException, ClassNotFoundException {
        String sql = "SELECT p.id_promotion, p.taux_reduction " +
                     "FROM promotions p " + // ‚ö† V√©rifie bien le nom exact de ta table en BD
                     "JOIN applique a ON p.id_promotion = a.id_promotion " +
                     "WHERE a.id_stock = ? AND p.date_fin >= CURDATE() " +
                     "ORDER BY p.date_fin DESC LIMIT 1"; // üîπ R√©cup√®re uniquement la promo la plus r√©cente

        try (Connection conn = Data.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, idStock);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    double tauxReduction = rs.getDouble("taux_reduction");
                    if (tauxReduction > 0) { // üîπ V√©rifie que la r√©duction est valide
                        return new Promotion(rs.getInt("id_promotion"), tauxReduction);
                    }
                }
            }
        }
        return null; // üîπ Retourne null si aucune promo n'est trouv√©e
    }

    /**
     * Supprime une promotion expir√©e
     */
    public void supprimerPromotionsExpirees() throws SQLException, ClassNotFoundException {
        String sql = "DELETE FROM promotions WHERE date_fin < CURDATE()";

        try (Connection conn = Data.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            int rowsDeleted = pstmt.executeUpdate();
            System.out.println("‚úÖ Suppression des promotions expir√©es (" + rowsDeleted + " supprim√©es)");
        } catch (SQLException ex) {
            ex.printStackTrace();
            System.out.println("‚ùå Erreur lors de la suppression des promotions expir√©es : " + ex.getMessage());
        }
    }
    
    public boolean promotionDejaExistante(int idStock) throws SQLException, ClassNotFoundException {
        String sql = "SELECT COUNT(*) FROM applique WHERE id_stock = ?";
        try (Connection conn = Data.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, idStock);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next() && rs.getInt(1) > 0) {
                    return true; // ‚úÖ Promotion d√©j√† existante
                }
            }
        }
        return false; // ‚ùå Pas de promotion existante
    }

    
    public double getPrixReduit(int idStock) {
        double prixInitial = -1;
        double prixReduit = -1;
        double tauxReduction = 0;

        String sql = "SELECT s.prix_initial, p.taux_reduction " +
                     "FROM stock s " +
                     "LEFT JOIN applique a ON s.id_stock = a.id_stock " +
                     "LEFT JOIN promotions p ON a.id_promotion = p.id_promotion " +
                     "WHERE s.id_stock = ? AND (p.date_fin IS NULL OR p.date_fin >= CURRENT_DATE())";

        try (Connection conn = Data.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, idStock);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    prixInitial = rs.getDouble("prix_initial"); // ‚úÖ R√©cup√®re le vrai prix stock√© en BD
                    tauxReduction = rs.getDouble("taux_reduction");

                    if (tauxReduction > 0) {
                        prixReduit = prixInitial - ((tauxReduction / 100) * prixInitial); // ‚úÖ Appliquer la r√©duction correctement
                    } else {
                        prixReduit = prixInitial; // ‚úÖ Aucun changement si pas de r√©duction
                    }

                    System.out.println("üîç DEBUG: Prix initial r√©cup√©r√© de la BD = " + prixInitial + 
                                       ", R√©duction appliqu√©e = " + tauxReduction + "%, Prix final calcul√© = " + prixReduit);
                }
            }
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }

        return prixReduit; // ‚úÖ Retourne toujours le bon prix, qu'il y ait promo ou non
    }

}
