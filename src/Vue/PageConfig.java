/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Vue;

import configUtil.ConfigManager;
import java.awt.GridLayout;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import util.Chiffrement;


/**
 *
 * @author Carmelle Adou
 */
public class PageConfig extends javax.swing.JDialog {

    private Properties properties;
    private static final String CONFIG_FILE = "src/config/config.properties";

    /**
     * Creates new form PageConfig
     */
    public PageConfig(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("Configuration de la Base de Données");
        
        loadConfig();
        saveConfig();
        jBtnSave.addActionListener(e -> saveConfig());
        jBtnundo.addActionListener(evt -> dispose());
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFielddriv = new javax.swing.JTextField();
        jTextFieldurl = new javax.swing.JTextField();
        jBtnSave = new javax.swing.JButton();
        jBtnundo = new javax.swing.JButton();
        jPasswordField = new javax.swing.JPasswordField();
        jTextFieldUser = new javax.swing.JTextField();
        jLabelDriver = new javax.swing.JLabel();
        jLabelurl = new javax.swing.JLabel();
        jLabelUtilisateur = new javax.swing.JLabel();
        jLabelmdp = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jTextFielddriv, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 24, 162, -1));
        getContentPane().add(jTextFieldurl, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 86, 151, -1));

        jBtnSave.setText("Enregistrer");
        getContentPane().add(jBtnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 295, -1, -1));

        jBtnundo.setText("Annuler");
        getContentPane().add(jBtnundo, new org.netbeans.lib.awtextra.AbsoluteConstraints(281, 295, -1, -1));
        getContentPane().add(jPasswordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 215, 151, -1));
        getContentPane().add(jTextFieldUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 146, 151, -1));

        jLabelDriver.setText("Driver:");
        getContentPane().add(jLabelDriver, new org.netbeans.lib.awtextra.AbsoluteConstraints(98, 27, -1, -1));

        jLabelurl.setText("URL:");
        getContentPane().add(jLabelurl, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 89, -1, -1));

        jLabelUtilisateur.setText("Utilisateur:");
        getContentPane().add(jLabelUtilisateur, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 149, -1, -1));

        jLabelmdp.setText("Mot de passe:");
        getContentPane().add(jLabelmdp, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 218, -1, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 420, 350));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void loadConfig() {
        properties = new Properties();
        File file = new File(CONFIG_FILE);
        if (!file.exists()) {
            JOptionPane.showMessageDialog(this, "Fichier de configuration introuvable.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try (FileInputStream fis = new FileInputStream(CONFIG_FILE)) {
            properties.load(fis);

            jTextFielddriv.setText(dechiffrerSiNecessaire(properties.getProperty("db.driver", "")));
            jTextFieldurl.setText(dechiffrerSiNecessaire(properties.getProperty("db.url", "")));
            jTextFieldUser.setText(dechiffrerSiNecessaire(properties.getProperty("db.user", "")));
            jPasswordField.setText(dechiffrerSiNecessaire(properties.getProperty("db.password", "")));

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Erreur lors du chargement de la configuration : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erreur de déchiffrement : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Fonction utilitaire pour déchiffrer seulement si le texte est chiffré
    private String dechiffrerSiNecessaire(String valeur) throws Exception {
        if (valeur.startsWith("ENC(") && valeur.endsWith(")")) {
            return Chiffrement.dechiffrer(valeur.substring(4, valeur.length() - 1));
        }
        return valeur; // Retourne en clair si non chiffré
    }


    /**
     * Sauvegarde les paramètres entrés par l'utilisateur dans config.properties
     */
    private void saveConfig() {
        try {
            // Chiffrer les données sensibles avant de les stocker
            properties.setProperty("db.driver", "ENC(" + Chiffrement.chiffrer(jTextFielddriv.getText().trim()) + ")");
            properties.setProperty("db.url", "ENC(" + Chiffrement.chiffrer(jTextFieldurl.getText().trim()) + ")");
            properties.setProperty("db.user", "ENC(" + Chiffrement.chiffrer(jTextFieldUser.getText().trim()) + ")");
            properties.setProperty("db.password", "ENC(" + Chiffrement.chiffrer(new String(jPasswordField.getPassword())) + ")");

            // Sauvegarde dans le fichier config
            try (FileOutputStream fos = new FileOutputStream(CONFIG_FILE)) {
                properties.store(fos, "Configuration de la base de données (chiffrée)");
            }
            JOptionPane.showMessageDialog(this, "Configuration enregistrée avec succès !");
            dispose();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erreur lors de l'enregistrement : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PageConfig.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PageConfig.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PageConfig.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PageConfig.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PageConfig dialog = new PageConfig(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnSave;
    private javax.swing.JButton jBtnundo;
    private javax.swing.JLabel jLabelDriver;
    private javax.swing.JLabel jLabelUtilisateur;
    private javax.swing.JLabel jLabelmdp;
    private javax.swing.JLabel jLabelurl;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JTextField jTextFieldUser;
    private javax.swing.JTextField jTextFielddriv;
    private javax.swing.JTextField jTextFieldurl;
    // End of variables declaration//GEN-END:variables
}
